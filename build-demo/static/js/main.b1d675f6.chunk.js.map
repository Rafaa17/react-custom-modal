{"version":3,"sources":["lib/Toast.tsx","lib/SvgIcons.tsx","lib/Modal.tsx","lib/component.tsx","lib/Header.tsx","lib/Footer.tsx","lib/Input.tsx","lib/ImageInput.tsx","lib/Dialog.tsx","lib/index.tsx","TestApp.tsx","index.js"],"names":["ToastPosition","closeIcon","color","height","width","aria-hidden","data-prefix","data-icon","className","xmlns","viewBox","fill","d","iconIllustrationTypes","warning","info","success","danger","DefaultToastPosition","BOTTOM_RIGHT","Toast","toasts","hideToast","map","toast","ToastItem","key","id","timeout","useState","toastData","setToast","in","out","animation","setAnimation","useEffect","hideMe","showMe","timeoutDuration","setTimeout","clearTimeout","useCallback","BOTTOM_CENTER","type","style","containerStyle","display","flexDirection","alignItems","customComponent","textStyle","text","cursor","onClick","Modal","hideModal","Component","ComponentJSX","componentProps","undefined","ModalToRender","setModalToRender","animationType","outAnimationType","allowOutsideClick","c","createElement","ModalBackdrop","document","body","classList","add","remove","ModalWrapper","children","ModalRoot","usePopup","componentJSX","component","Header","showCloseButton","title","headerTextStyle","headerStyle","position","right","Footer","optionsToRender","footerStyle","option","index","name","Input","item","setInputValues","inputValues","textAlign","marginBottom","label","inputType","onChange","val","nativeEvent","target","value","placeholder","ImageInput","inputRef","useRef","current","click","ref","multiple","event","files","imagePromises","images","Array","from","forEach","file","push","Promise","resolve","reader","FileReader","onload","e","src","result","readAsDataURL","all","then","readImage","image","alt","maxHeight","slice","borderRadius","top","zIndex","AnimationType","OutAnimationType","DialogType","Dialog","props","optionButtons","onConfirm","onCancel","isAlert","isInput","confirmText","cancelText","inputs","onDismissed","input","bodyComponent","inputsToRender","DefaultPopupActions","showModal","_component","_options","showAlert","hideAlert","showOptionDialog","showInputDialog","showToast","_toastId","ExportedPopupActions","ModalContext","createContext","Provider","reducer","Consumer","state","modalProps","findIndex","t","Error","PopupProvider","initialState","options","dispatch","isInputDialog","Math","random","toString","substring","toastId","useReducer","useContext","callMe","PopupActions","DANGER","MyComponent","TestComponent","background","padding","fontWeight","fontSize","JSON","stringify","buttonStyles","marginTop","a","SLIDE_IN_UP","SLIDE_OUT_UP","FADE_IN","FADE_OUT","WARNING","ZOOM_IN","SUCCESS","INFO","response","App","Setup","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b1d675f6.chunk.js","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react';\r\nimport {AnimationType, IToast, ToastOptions} from \"./index\";\r\nimport {closeIcon, iconIllustrationTypes} from \"./SvgIcons\";\r\n\r\ninterface IToasts {\r\n    toasts?: Array<IToast>;\r\n    hideToast: (toastId: string) => void;\r\n}\r\n\r\nexport enum ToastPosition {\r\n    TOP_RIGHT = 'top-right',\r\n    BOTTOM_RIGHT = 'bottom-right',\r\n    BOTTOM_CENTER = 'bottom-center'\r\n}\r\n\r\nlet DefaultToastPosition = ToastPosition.BOTTOM_RIGHT;\r\n\r\nexport const setToastPosition = (position: ToastPosition) => {\r\n    DefaultToastPosition = position;\r\n}\r\n\r\nexport default function Toast({toasts, hideToast}: IToasts) {\r\n\r\n    return (\r\n        <div className={`react-custom-toast-container react-custom-toast-${DefaultToastPosition}`}>\r\n            {toasts && toasts.map(toast => <ToastItem key={toast.id} toast={toast} hideToast={hideToast}/>)}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\ninterface IProps {\r\n    toast: IToast,\r\n    animationType?: AnimationType;\r\n    hideToast: (toastId: string) => void;\r\n}\r\n\r\nfunction ToastItem({toast, hideToast}: IProps) {\r\n\r\n    const [toastData, setToast] = useState<ToastOptions | null>(null);\r\n\r\n    const [animation, setAnimation] = useState<{ in: string, out: string }>({in: '', out: ''});\r\n\r\n    let timeout: NodeJS.Timeout;\r\n\r\n    useEffect(() => {\r\n        if (toastData && !toast) {\r\n            hideMe();\r\n        } else if (toast && !toastData) {\r\n            showMe();\r\n            if (toast.timeoutDuration) {\r\n                timeout = setTimeout(hideMe, toast.timeoutDuration)\r\n            }\r\n\r\n        }\r\n        return () => clearTimeout(timeout);\r\n    }, [toast])\r\n\r\n    useEffect(() => {\r\n\r\n        if (animation.in && toast) {\r\n            setToast(toast);\r\n        }\r\n\r\n        if (animation.out) {\r\n            timeout = setTimeout(() => {\r\n                setToast(null);\r\n                hideToast(toast.id);\r\n            }, 500);\r\n        }\r\n\r\n    }, [animation])\r\n\r\n    const hideMe = useCallback(() => {\r\n        if (DefaultToastPosition === ToastPosition.BOTTOM_CENTER) {\r\n            setAnimation({out: 'animate__animated animate__slideOutDown animate__faster', in: ''})\r\n        } else {\r\n            setAnimation({out: 'animate__animated animate__slideOutRight animate__faster', in: ''})\r\n        }\r\n    }, []);\r\n\r\n    const showMe = useCallback(() => {\r\n        if (DefaultToastPosition === ToastPosition.BOTTOM_CENTER) {\r\n            setAnimation({in: 'animate__animated animate__slideInUp animate__faster', out: ''})\r\n        } else {\r\n            setAnimation({in: 'animate__animated animate__slideInRight animate__faster', out: ''})\r\n        }\r\n    }, []);\r\n\r\n    if (!toastData)\r\n        return null;\r\n\r\n    return (\r\n        <div className={`react-custom-toast-${toastData.type} react-custom-toast ${animation.in} ${animation.out}`}\r\n             style={{...toast.containerStyle}}>\r\n            <div style={{\r\n                width: '90%',\r\n                display: 'flex',\r\n                flexDirection: 'row',\r\n                alignItems: 'center'\r\n            }}>\r\n                {toast.customComponent || (\r\n                    <>\r\n                        <div>\r\n                            {iconIllustrationTypes[toastData.type]}\r\n                        </div>\r\n                        <div className={'react-custom-toast-text'} style={{...toast.textStyle}}>\r\n                            {toastData.text}\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </div>\r\n            <div style={{width: \"10%\", cursor: 'pointer'}}\r\n                 onClick={hideMe}>{closeIcon()}</div>\r\n        </div>\r\n    )\r\n\r\n}","import React from \"react\";\r\n\r\nexport const closeIcon = (color:string = '#484848') => <svg color={color} height={20} width={20} aria-hidden=\"true\" data-prefix=\"fas\"\r\n                                    data-icon=\"times\"\r\n                                    className=\"svg-inline--fa fa-times fa-w-11\" xmlns=\"http://www.w3.org/2000/svg\"\r\n                                    viewBox=\"0 0 352 512\">\r\n    <path fill=\"currentColor\"\r\n          d=\"M242.72 256l100.07-100.07c12.28-12.28 12.28-32.19 0-44.48l-22.24-22.24c-12.28-12.28-32.19-12.28-44.48 0L176 189.28 75.93 89.21c-12.28-12.28-32.19-12.28-44.48 0L9.21 111.45c-12.28 12.28-12.28 32.19 0 44.48L109.28 256 9.21 356.07c-12.28 12.28-12.28 32.19 0 44.48l22.24 22.24c12.28 12.28 32.2 12.28 44.48 0L176 322.72l100.07 100.07c12.28 12.28 32.2 12.28 44.48 0l22.24-22.24c12.28-12.28 12.28-32.19 0-44.48L242.72 256z\"/>\r\n</svg>;\r\n\r\nexport const iconIllustrationTypes = {\r\n    warning: <svg width={20} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\"><path d=\"M256 0C115.2 0 0 115.2 0 256s115.2 256 256 256 256-115.2 256-256S396.8 0 256 0zm0 51.2c28.16 0 48.64 23.04 46.08 51.2L281.6 307.2h-51.2l-20.48-204.8c-2.56-28.16 17.92-51.2 46.08-51.2zm0 409.6c-28.16 0-51.2-23.04-51.2-51.2 0-28.16 23.04-51.2 51.2-51.2s51.2 23.04 51.2 51.2c0 28.16-23.04 51.2-51.2 51.2z\"/></svg>,\r\n    info: <svg width={20} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 450.56 450.56\"><path d=\"M225.28 0C101.376 0 0 101.376 0 225.28s101.376 225.28 225.28 225.28 225.28-101.376 225.28-225.28S349.184 0 225.28 0zm23.552 321.024h-48.128V183.296h48.128v137.728zm0-167.424h-48.128v-30.208h48.128V153.6z\"/></svg>,\r\n    success: <svg width={20} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 477.867 477.867\"><path d=\"M238.933 0C106.974 0 0 106.974 0 238.933s106.974 238.933 238.933 238.933 238.933-106.974 238.933-238.933C477.726 107.033 370.834.141 238.933 0zm131.533 165.666L199.799 336.333c-6.665 6.663-17.468 6.663-24.132 0L107.4 268.066c-6.78-6.548-6.968-17.352-.42-24.132 6.548-6.78 17.352-6.968 24.132-.42.142.138.282.277.42.42l56.201 56.201 158.601-158.601c6.78-6.548 17.584-6.36 24.132.419 6.388 6.614 6.388 17.099 0 23.713z\"/></svg>,\r\n    danger: <svg width={20} xmlns=\"http://www.w3.org/2000/svg\"   viewBox=\"0 0 512 512\"><path d=\"M501.362 383.95L320.497 51.474c-29.059-48.921-99.896-48.986-128.994 0L10.647 383.95c-29.706 49.989 6.259 113.291 64.482 113.291h361.736c58.174 0 94.203-63.251 64.497-113.291zM256 437.241c-16.538 0-30-13.462-30-30s13.462-30 30-30 30 13.462 30 30-13.462 30-30 30zm30-120c0 16.538-13.462 30-30 30s-30-13.462-30-30v-150c0-16.538 13.462-30 30-30s30 13.462 30 30v150z\"/></svg>\r\n}\r\n\r\n","import React, {createElement, useCallback, useEffect, useState} from 'react';\r\n\r\ninterface IProps {\r\n    hideModal: () => void;\r\n    Component?: () => JSX.Element;\r\n    ComponentJSX?: JSX.Element;\r\n    componentProps: React.ComponentProps<any>\r\n}\r\n\r\nexport default function Modal({hideModal, Component, ComponentJSX, componentProps}: IProps) {\r\n\r\n    const [ModalToRender, setModalToRender] = useState<JSX.Element | undefined>(undefined);\r\n\r\n    const [animation, setAnimation] = useState<{ in: string, out: string }>({in: '', out: ''});\r\n\r\n    const {animationType, outAnimationType, allowOutsideClick = true} = componentProps;\r\n\r\n    let timeout: NodeJS.Timeout;\r\n\r\n    useEffect(() => {\r\n        if (ModalToRender && !(Component || ComponentJSX)) {\r\n            hideMe();\r\n        } else if (Component || ComponentJSX) {\r\n            showMe();\r\n        }\r\n        return () => clearTimeout(timeout);\r\n    }, [Component, ComponentJSX, componentProps])\r\n\r\n    useEffect(() => {\r\n\r\n        if (animation.in && (Component || ComponentJSX)) {\r\n            // @ts-ignore\r\n            let c: JSX.Element | undefined;\r\n            if (Component) {\r\n                c = createElement(Component, {\r\n                    ...componentProps, hideModal: hideModal\r\n                });\r\n            }\r\n            setModalToRender(ComponentJSX || c);\r\n        }\r\n\r\n        if (animation.out) {\r\n            if (!outAnimationType) {\r\n                setModalToRender(undefined);\r\n            } else\r\n                timeout = setTimeout(() => {\r\n                    setModalToRender(undefined);\r\n                }, 600);\r\n        }\r\n\r\n    }, [animation])\r\n\r\n    const hideMe = useCallback(() => {\r\n        setAnimation({out: `animate__animated animate__${outAnimationType} animate__faster`, in: ''})\r\n    }, [outAnimationType]);\r\n\r\n    const showMe = useCallback(() => {\r\n        setAnimation({out: '', in: `animate__animated animate__${animationType} animate__faster`})\r\n    }, [animationType]);\r\n\r\n    if (!ModalToRender)\r\n        return null;\r\n\r\n    return (\r\n        <ModalWrapper>\r\n            <ModalBackdrop onClick={allowOutsideClick ? hideModal : ()=>{}}/>\r\n            <div className={animation.in || animation.out}>\r\n                {ModalToRender}\r\n            </div>\r\n        </ModalWrapper>\r\n    )\r\n\r\n}\r\n\r\nconst ModalBackdrop = ({onClick}: { onClick: () => void }) => {\r\n    useEffect(() => {\r\n        document.body.classList.add(\"react-custom-modal-open\");\r\n\r\n        return () => {\r\n            document.body.classList.remove(\"react-custom-modal-open\");\r\n        };\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            onClick={onClick}\r\n            className={`react-custom-modal-backdrop`}\r\n        >\r\n        </div>\r\n    );\r\n};\r\n\r\nconst ModalWrapper = ({children}: { children: any }) => (\r\n    <div className=\"react-custom-modal-wrapper\">{children}</div>\r\n);","import React from \"react\";\r\n\r\nimport \"./index.scss\";\r\nimport \"./animate.css\";\r\nimport {usePopup} from \"./index\";\r\nimport Toast from \"./Toast\";\r\nimport Modal from \"./Modal\";\r\n\r\nexport const ModalRoot = () => {\r\n\r\n    let {\r\n        componentJSX: ComponentJSX,\r\n        component: Component,\r\n        toasts,\r\n        componentProps,\r\n        hideModal,\r\n        hideToast,\r\n    } = usePopup();\r\n\r\n    componentProps = {...componentProps}\r\n\r\n    return (\r\n        <>\r\n            <Modal componentProps={componentProps} Component={Component} ComponentJSX={ComponentJSX}\r\n                   hideModal={hideModal} />\r\n            <Toast hideToast={hideToast} toasts={toasts}/>\r\n        </>\r\n    )\r\n\r\n};\r\n","import React from 'react';\r\nimport {closeIcon, iconIllustrationTypes} from \"./SvgIcons\";\r\nimport {DialogType} from \"./index\";\r\n\r\ninterface IProps {\r\n    showCloseButton: boolean;\r\n    type: DialogType;\r\n    hideModal: () => void;\r\n    title: string;\r\n    headerTextStyle?: React.CSSProperties;\r\n    headerStyle?: React.CSSProperties;\r\n}\r\n\r\nconst Header = ({showCloseButton, type, hideModal, title, headerTextStyle, headerStyle}: IProps) => {\r\n\r\n    return (\r\n        <div className={`react-custom-header react-custom-header-${type}`} style={{...headerStyle}}>\r\n            {iconIllustrationTypes[type]}\r\n            {showCloseButton && (\r\n                <div style={{position: 'absolute', right: 20, cursor: 'pointer'}}\r\n                     onClick={hideModal}>{closeIcon()}</div>\r\n            )}\r\n            <div className={`react-custom-title ${iconIllustrationTypes[type] ? 'react-custom-title-margin' : ''}`} style={{...headerTextStyle}}>{title}</div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\ninterface IProps {\r\n    optionsToRender: Array<any>;\r\n    footerStyle?: React.CSSProperties;\r\n}\r\n\r\nexport default function Footer({optionsToRender, footerStyle}: IProps) {\r\n\r\n    return (\r\n        <div className={'react-custom-footer'} style={{...footerStyle}}>\r\n            <div className={'react-custom-options-container'}>\r\n                {optionsToRender.map((option,index) => (\r\n                    <button key={`option${index}`} className={'react-custom-option-button'} onClick={option.onClick}>\r\n                        {option.name}\r\n                    </button>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}","import React, {Dispatch, SetStateAction} from 'react';\r\nimport {InputProps} from \"./index\";\r\n\r\ninterface IProps {\r\n    item: InputProps;\r\n    setInputValues: Dispatch<SetStateAction<{[key:string]:any}>>;\r\n    inputValues: {};\r\n}\r\n\r\nexport default function Input({item, setInputValues, inputValues}: IProps) {\r\n\r\n    return (\r\n        <div style={{textAlign: \"left\"}}>\r\n            <label style={{display: \"block\", marginBottom: 5}}>\r\n                {item.label}\r\n            </label>\r\n            {item.inputType && item.inputType !== \"textarea\" ? (\r\n                <input\r\n                    className={'react-custom-input-item'}\r\n                    onChange={(val) => {\r\n                        setInputValues({\r\n                            ...inputValues,\r\n                            // @ts-ignore\r\n                            [item.name]: val.nativeEvent.target.value,\r\n                        });\r\n                    }}\r\n                    // @ts-ignore\r\n                    value={\r\n                        inputValues[item.name] ? inputValues[item.name] : ''\r\n                    }\r\n                    id={item.name}\r\n                    placeholder={item.placeholder}\r\n                    type={item.inputType || \"text\"}\r\n                />\r\n            ) : null}\r\n            {item.inputType === \"textarea\" ? (\r\n                <textarea\r\n                    onChange={(val) => {\r\n                        setInputValues({\r\n                            ...inputValues,\r\n                            // @ts-ignore\r\n                            [item.name]: val.nativeEvent.target.value,\r\n                        });\r\n                    }}\r\n                    // @ts-ignore\r\n                    value={\r\n                        inputValues[item.name] ? inputValues[item.name] : ''\r\n                    }\r\n                    className={'react-custom-input-item'}\r\n                    id={item.name}\r\n                    placeholder={item.placeholder}\r\n                />\r\n            ) : null}\r\n        </div>\r\n    )\r\n\r\n}","import React, {ChangeEvent, Dispatch, SetStateAction, useRef} from 'react';\r\nimport {ImageInputProps, InputProps} from \"./index\";\r\nimport {closeIcon} from \"./SvgIcons\";\r\n\r\ninterface IProps {\r\n    setInputValues: Dispatch<SetStateAction<{ [key: string]: any }>>;\r\n    inputValues: { [key: string]: any };\r\n    item: InputProps;\r\n}\r\n\r\nexport default function ImageInput({setInputValues, inputValues, item}: IProps) {\r\n\r\n    const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n    const readImage = (event: ChangeEvent<HTMLInputElement>) => {\r\n        if (event.target.files) {\r\n            let imagePromises: Array<Promise<void>> = [];\r\n            let images: Array<any> = [];\r\n            Array.from(event.target.files).forEach((file: File) => {\r\n                imagePromises.push(\r\n                    new Promise((resolve) => {\r\n                        var reader = new FileReader();\r\n                        reader.onload = function (e) {\r\n                            images.push({src: e.target!.result, value: file});\r\n                            resolve();\r\n                        };\r\n                        reader.readAsDataURL(file);\r\n                    })\r\n                );\r\n            });\r\n            Promise.all(imagePromises).then(() => {\r\n                setInputValues({\r\n                    ...inputValues,\r\n                    // @ts-ignore\r\n                    [item.name]: [...images],\r\n                });\r\n                inputRef.current!.value! = \"\";\r\n                // event.target.reset();\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div style={{textAlign: \"left\"}}>\r\n                <label style={{display: \"block\", marginBottom: 5}}>{item.label || ''}</label>\r\n                <div\r\n                    style={{cursor: 'pointer'}}\r\n                    className={'react-custom-input-item select-image'}\r\n                    onClick={() => {\r\n                        if (inputRef.current) inputRef.current.click();\r\n                    }}\r\n                >\r\n                    Select Image\r\n                </div>\r\n                <input\r\n                    ref={(ref) => {\r\n                        // @ts-ignore\r\n                        inputRef.current = ref;\r\n                    }}\r\n                    value={inputRef.current ? inputRef.current.value : \"\"}\r\n                    multiple={(item as ImageInputProps).multiple || false}\r\n                    className={'react-custom-input-item'}\r\n                    onChange={(val) => readImage(val)}\r\n                    style={{display: \"none\"}}\r\n                    id={\"image\"}\r\n                    type={\"file\"}\r\n                />\r\n            </div>\r\n            <div style={{textAlign: \"left\"}}>\r\n                {inputValues &&\r\n                inputValues[item.name] &&\r\n                // @ts-ignore\r\n                inputValues[item.name].map((image, index) => (\r\n                    <div\r\n                        className={'react-custom-input-img-container'}\r\n                        key={'image' + index}\r\n                        style={{\r\n                            position: \"relative\",\r\n                        }}\r\n                    >\r\n                        <img alt=\"\" style={{maxHeight: 100}} src={image.src}/>\r\n                        <div\r\n                            onClick={() => {\r\n                                setInputValues({\r\n                                    ...inputValues,\r\n                                    // @ts-ignore\r\n                                    [item.name]:\r\n                                        [...inputValues[item.name].slice(0, index),\r\n                                            ...inputValues[item.name].slice(index + 1)]\r\n                                })\r\n                            }\r\n                            }\r\n                            style={{\r\n                                borderRadius: 5,\r\n                                position: \"absolute\",\r\n                                top: 5,\r\n                                right: 5,\r\n                                zIndex: 500,\r\n                                cursor: 'pointer'\r\n                            }}\r\n                        >\r\n                            {closeIcon('white')}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n\r\n}","import React, {useState} from \"react\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport {DialogType, DynamicObject, InputProps, OptionDialogButton} from \"./index\";\r\nimport Header from \"./Header\";\r\nimport Footer from \"./Footer\";\r\nimport Input from \"./Input\";\r\nimport ImageInput from \"./ImageInput\";\r\n\r\ninterface DialogProps {\r\n    title: string,\r\n    text: string,\r\n    type: DialogType,\r\n    hideModal: () => {},\r\n    optionButtons: Array<OptionDialogButton>,\r\n    onConfirm: (result?: DynamicObject) => {},\r\n    onCancel: (result?: DynamicObject) => {},\r\n    isAlert: boolean,\r\n    isInput: boolean,\r\n    confirmText: string,\r\n    cancelText: string,\r\n    showCloseButton: boolean,\r\n    inputs: Array<any>,\r\n    onDismissed: (result?: DynamicObject) => {},\r\n    onOpened: (result?: DynamicObject) => {},\r\n    input: InputProps,\r\n    headerTextStyle?: React.CSSProperties;\r\n    textStyle?: React.CSSProperties;\r\n    containerStyle?: React.CSSProperties;\r\n    headerStyle?: React.CSSProperties;\r\n    footerStyle?: React.CSSProperties;\r\n    bodyComponent?: JSX.Element;\r\n}\r\n\r\nconst Dialog = (props: DialogProps) => {\r\n\r\n    const {\r\n        title,\r\n        text,\r\n        type,\r\n        hideModal,\r\n        optionButtons = null,\r\n        onConfirm = null,\r\n        onCancel = null,\r\n        isAlert = true,\r\n        showCloseButton = false,\r\n        isInput = false,\r\n        confirmText = \"Ok\",\r\n        cancelText = \"Cancel\",\r\n        inputs = null,\r\n        onDismissed = null,\r\n        input,\r\n        headerTextStyle,\r\n        textStyle,\r\n        containerStyle,\r\n        headerStyle,\r\n        footerStyle,\r\n        bodyComponent\r\n    } = props;\r\n\r\n    const [inputValues, setInputValues] = useState<{ [key: string]: any }>(\r\n        input && input[\"default\"] ? {[input.name]: input[\"default\"]} : {}\r\n    );\r\n\r\n    let optionsToRender = [];\r\n\r\n    if (!isAlert)\r\n        if (optionButtons) optionsToRender = optionButtons;\r\n        else\r\n            optionsToRender = [\r\n                {\r\n                    name: cancelText,\r\n                    onClick: () => {\r\n                        hideModal();\r\n                        if (onCancel) onCancel();\r\n                        if (onDismissed && isInput) onDismissed(inputValues);\r\n                    },\r\n                },\r\n                {\r\n                    name: confirmText,\r\n                    onClick: () => {\r\n                        hideModal();\r\n                        if (onConfirm) onConfirm(inputValues);\r\n                        if (onDismissed && isInput) onDismissed(inputValues);\r\n                    },\r\n                },\r\n            ];\r\n    else\r\n        optionsToRender = [\r\n            {\r\n                name: confirmText,\r\n                onClick: () => {\r\n                    hideModal();\r\n                },\r\n            },\r\n        ];\r\n\r\n    let inputsToRender: InputProps[] = [];\r\n\r\n    if (isInput) {\r\n        if (!inputs) inputsToRender = [input];\r\n        else inputsToRender = inputs;\r\n    }\r\n\r\n    return (\r\n        <div className={'react-custom-dialog-wrapper'} style={{...containerStyle}}>\r\n            <Header headerStyle={headerStyle} headerTextStyle={headerTextStyle} showCloseButton={showCloseButton}\r\n                    type={type}\r\n                    hideModal={hideModal} title={title}/>\r\n            {bodyComponent || (\r\n                <>\r\n                    {text && text !== \"\" ?\r\n                        <div className={'react-custom-body-text'} style={{...textStyle}}>{text}</div> : null}\r\n                    {isInput && (\r\n                        <div className={'react-custom-inputs-container'}>\r\n                            <>\r\n                                {inputsToRender.map((item, index) =>\r\n                                    <div key={`input${index}`} className={'react-custom-input-container'}>\r\n                                        {item.inputType !== 'image' ? (\r\n                                                <Input item={item} setInputValues={setInputValues}\r\n                                                       inputValues={inputValues}/>) :\r\n                                            <ImageInput item={item} setInputValues={setInputValues}\r\n                                                        inputValues={inputValues}/>}\r\n                                    </div>\r\n                                )}\r\n                            </>\r\n                        </div>\r\n                    )}\r\n                </>\r\n            )\r\n            }\r\n            <Footer footerStyle={footerStyle} optionsToRender={optionsToRender}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dialog;\r\n","import React, {\r\n    createContext,\r\n    useContext,\r\n    useReducer\r\n} from \"react\";\r\nimport {ModalRoot} from \"./component\";\r\nimport Dialog from \"./Dialog\";\r\nimport {ToastPosition} from \"./Toast\";\r\n\r\nexport enum AnimationType {\r\n    FADE_IN = 'fadeIn',\r\n    FADE_IN_UP = 'fadeInUp',\r\n    FLASH = 'flash',\r\n    HEART_BEAT = 'heartBeat',\r\n    SLIDE_IN_LEFT = 'slideInLeft',\r\n    SLIDE_IN_RIGHT = 'slideInRight',\r\n    SLIDE_IN_UP = 'slideInUp',\r\n    SWING = 'swing',\r\n    ZOOM_IN = 'zoomIn'\r\n}\r\n\r\nexport enum OutAnimationType {\r\n    FADE_OUT = 'fadeOut',\r\n    SLIDE_OUT_LEFT = 'slideOutLeft',\r\n    SLIDE_OUT_RIGHT = 'slideOutRight',\r\n    SLIDE_OUT_UP = 'slideOutUp',\r\n    ZOOM_OUT = 'zoomOut'\r\n}\r\n\r\nexport enum DialogType {\r\n    WARNING = 'warning',\r\n    INFO = 'info',\r\n    DANGER = 'danger',\r\n    SUCCESS = 'success'\r\n}\r\n\r\nexport interface OptionDialogButton {\r\n    name: string;\r\n    onClick: () => void;\r\n    color?: string;\r\n}\r\n\r\ninterface OptionDialogOptions {\r\n    animationType?: AnimationType;\r\n    outAnimationType?: OutAnimationType;\r\n    cancelText?: string;\r\n    confirmText?: string;\r\n    containerStyle?: React.CSSProperties;\r\n    footerStyle?: React.CSSProperties;\r\n    headerStyle?: React.CSSProperties;\r\n    headerTextStyle?: React.CSSProperties;\r\n    onCancel?: () => void;\r\n    onConfirm?: () => void;\r\n    optionButtons?: Array<OptionDialogButton>;\r\n    showCloseButton?: boolean;\r\n    text?: string;\r\n    textStyle?: React.CSSProperties;\r\n    title?: string,\r\n    type?: DialogType;\r\n    bodyComponent?: JSX.Element;\r\n    allowOutsideClick?: boolean;\r\n}\r\n\r\nexport interface InputProps {\r\n    default?: string;\r\n    inputType: 'text' | 'file' | 'number' | 'textarea' | 'date' | 'image';\r\n    label?: string;\r\n    /*\r\n        The name that will be used in the response to read the value\r\n     */\r\n    name: string;\r\n    placeholder?: string;\r\n}\r\n\r\nexport interface ImageInputProps extends InputProps{\r\n    inputType: 'image';\r\n    multiple?: boolean;\r\n}\r\n\r\nexport interface DynamicObject {\r\n    [key: string]: Object;\r\n}\r\n\r\ninterface InputDialogOptions {\r\n    animationType?: AnimationType;\r\n    outAnimationType?: OutAnimationType;\r\n    cancelText?: string;\r\n    confirmText?: string;\r\n    containerStyle?: React.CSSProperties;\r\n    footerStyle?: React.CSSProperties;\r\n    headerStyle?: React.CSSProperties;\r\n    headerTextStyle?: React.CSSProperties;\r\n    input?: InputProps | ImageInputProps;\r\n    inputs?: Array<InputProps | ImageInputProps>;\r\n    onCancel?: () => void;\r\n    onConfirm?: (result?: DynamicObject) => void;\r\n    onDismissed?: () => void;\r\n    options?: Array<OptionDialogButton>;\r\n    showCloseButton?: boolean;\r\n    text?: string;\r\n    textStyle?: React.CSSProperties;\r\n    title?: string;\r\n    type?: DialogType;\r\n    allowOutsideClick?: boolean;\r\n}\r\n\r\ninterface AlertOptions {\r\n    animationType?: AnimationType;\r\n    outAnimationType?: OutAnimationType;\r\n    confirmText?: string;\r\n    containerStyle?: React.CSSProperties;\r\n    footerStyle?: React.CSSProperties;\r\n    headerStyle?: React.CSSProperties;\r\n    headerTextStyle?: React.CSSProperties;\r\n    showCloseButton?: boolean;\r\n    text?: string;\r\n    textStyle?: React.CSSProperties;\r\n    title?: string;\r\n    type?: DialogType;\r\n    bodyComponent?: JSX.Element;\r\n    allowOutsideClick?: boolean;\r\n}\r\n\r\nexport interface ToastOptions {\r\n    containerStyle?: React.CSSProperties;\r\n    customComponent?: JSX.Element;\r\n    position?: ToastPosition;\r\n    text?: string;\r\n    textStyle?: React.CSSProperties,\r\n    timeoutDuration?: number;\r\n    type: DialogType;\r\n    showCloseButton?: boolean;\r\n}\r\n\r\nexport type IToast = ToastOptions & { id: string };\r\n\r\nexport interface ModalOptions {\r\n    animationType?: AnimationType,\r\n    outAnimationType?: OutAnimationType,\r\n    timeoutDuration?: number;\r\n}\r\n\r\ninterface PopupContext {\r\n    component?: () => JSX.Element;\r\n    componentJSX?: JSX.Element;\r\n    componentProps?: React.ComponentProps<any>;\r\n    toasts?: Array<IToast>;\r\n    showModal: (component: JSX.Element, options?: ModalOptions) => void;\r\n    hideModal: () => void;\r\n    showAlert: (options: AlertOptions) => void;\r\n    hideAlert: () => void;\r\n    showOptionDialog: (options: OptionDialogOptions) => void;\r\n    showInputDialog: (options: InputDialogOptions) => void;\r\n    showToast: (options: ToastOptions) => void;\r\n    hideToast: (toastId: string) => void;\r\n}\r\n\r\nlet DefaultPopupActions: PopupContext = {\r\n    showModal: (_component: JSX.Element, _options?: ModalOptions) => null,\r\n    hideModal: () => null,\r\n    showAlert: (_options: AlertOptions) => null,\r\n    hideAlert: () => null,\r\n    showOptionDialog: (_options: OptionDialogOptions) => null,\r\n    showInputDialog: (_options: InputDialogOptions) => null,\r\n    showToast: (_options: ToastOptions) => null,\r\n    hideToast: (_toastId: string) => null,\r\n}\r\n\r\nlet ExportedPopupActions: Omit<PopupContext, 'componentProps' | 'component' | 'componentJSX' | 'toasts'> = {\r\n    ...DefaultPopupActions\r\n}\r\n\r\nconst ModalContext = createContext<PopupContext>(DefaultPopupActions);\r\n\r\nconst {Provider, Consumer: ModalConsumer} = ModalContext;\r\n\r\nconst reducer = (state: any, {\r\n    type,\r\n    component,\r\n    componentProps,\r\n    componentJSX,\r\n    toast,\r\n    id\r\n}: { type: 'openModal' | 'hideModal' | 'showToast' | 'hideToast', componentJSX?: JSX.Element, component?: any, componentProps?: any, toast?: IToast, id?: string }) => {\r\n    switch (type) {\r\n        case \"openModal\":\r\n            return {...state, component, componentProps, componentJSX};\r\n        case \"hideModal\":\r\n            return {...state, component: null, modalProps: {}, componentJSX: null};\r\n        case \"showToast\":\r\n            return {...state, toasts: [...state.toasts, toast], componentProps};\r\n        case \"hideToast\":\r\n            const index = state.toasts.findIndex((t: { id: string | undefined; }) => t.id === id);\r\n            return {...state, toasts: [...state.toasts.slice(0, index), ...state.toasts.slice(index + 1)]};\r\n        default:\r\n            throw new Error(\"Unspecified reducer action\");\r\n    }\r\n};\r\n\r\nconst PopupProvider = ({children}: { children: any }) => {\r\n\r\n    const initialState: PopupContext = {\r\n        componentJSX: undefined,\r\n        component: undefined,\r\n        componentProps: {},\r\n        toasts: [],\r\n        showModal: (componentJSX: JSX.Element, options?: ModalOptions) => {\r\n            dispatch({type: \"openModal\", componentJSX, componentProps: {...options}});\r\n        },\r\n        hideModal: () => {\r\n            dispatch({type: \"hideModal\"});\r\n        },\r\n        showAlert: (options: AlertOptions) => {\r\n            dispatch({\r\n                    type: 'openModal',\r\n                    component: Dialog, componentProps: {isAlert: true, isInputDialog: false, ...options}\r\n                }\r\n            )\r\n        },\r\n        hideAlert: () => {\r\n            dispatch({type: \"hideModal\"})\r\n        },\r\n        showOptionDialog: (options: OptionDialogOptions) => {\r\n            dispatch({\r\n                type: \"openModal\",\r\n                component: Dialog,\r\n                componentProps: {\r\n                    isAlert: false,\r\n                    isInput: false,\r\n                    ...options\r\n                }\r\n            });\r\n        },\r\n        showInputDialog: (options: InputDialogOptions) => {\r\n            dispatch({\r\n                type: \"openModal\",\r\n                component: Dialog,\r\n                componentProps: {\r\n                    isAlert: false,\r\n                    isInput: true,\r\n                    ...options\r\n                }\r\n            });\r\n        },\r\n        showToast: (options: ToastOptions) => {\r\n            dispatch({\r\n                type: 'showToast',\r\n                toast: {...options, id: Math.random().toString(36).substring(7)},\r\n                componentProps: {...options}\r\n            })\r\n        },\r\n        hideToast: (toastId?: string) => {\r\n            dispatch({\r\n                type: 'hideToast',\r\n                id: toastId\r\n            })\r\n        }\r\n    };\r\n\r\n    ExportedPopupActions = initialState;\r\n\r\n    const [state, dispatch] = useReducer(reducer, initialState);\r\n    return (\r\n        <div>\r\n            <Provider value={state}>\r\n                <ModalRoot/>\r\n                {children}\r\n            </Provider>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst usePopup = () => useContext(ModalContext);\r\n\r\n\r\nexport {ModalConsumer, PopupProvider, usePopup, ExportedPopupActions as PopupActions};","import React from 'react';\r\nimport {AnimationType, DialogType, OutAnimationType, PopupActions, PopupProvider, usePopup} from './lib'\r\n\r\nimport './TestApp.css'\r\n\r\nfunction callMe() {\r\n    PopupActions.showToast({text: 'test', type: DialogType.DANGER});\r\n}\r\n\r\nconst MyComponent = () => {\r\n\r\n    const TestComponent = (props: { a: string }) => {\r\n\r\n        return (\r\n            <div style={{background: 'white', borderRadius: 5, width: 500, padding: 20}}>\r\n                <h4> Fantasy T-shirt</h4>\r\n                <label className={\"text-muted\"}>Shirts</label>\r\n                <h3 className={\"mt-3\"} style={{fontWeight: 600, fontSize: \"20px\"}}>\r\n                    $39.99\r\n                </h3>\r\n                <p className={\"mt-3\"}>\r\n                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Numquam,\r\n                    sapiente illo. Sit error voluptas repellat rerum quidem, soluta enim\r\n                    perferendis voluptates laboriosam. Distinctio, officia quis dolore\r\n                    quos sapiente tempore alias.\r\n                </p>\r\n                Received\r\n                Props: {JSON.stringify(props)}\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n    const {showAlert, showOptionDialog, showInputDialog, showModal, showToast} = usePopup();\r\n\r\n    const buttonStyles: React.CSSProperties = {\r\n        display: 'block',\r\n        marginTop: 5\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>Modal</h2>\r\n            <div className={'example-button'} style={buttonStyles}\r\n                 onClick={() => showModal(<TestComponent a={'test'}/>, {\r\n                     animationType: AnimationType.SLIDE_IN_UP,\r\n                     outAnimationType: OutAnimationType.SLIDE_OUT_UP\r\n                 })}>Modal\r\n            </div>\r\n\r\n            <h2>Alert</h2>\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showAlert({\r\n                type: DialogType.DANGER,\r\n                text: 'Text',\r\n                title: 'Title',\r\n                animationType: AnimationType.FADE_IN,\r\n                outAnimationType: OutAnimationType.FADE_OUT\r\n            })}>Danger Alert\r\n            </div>\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showAlert({\r\n                type: DialogType.WARNING,\r\n                text: 'Text',\r\n                title: 'Title',\r\n                animationType: AnimationType.ZOOM_IN\r\n            })}>Warning Alert\r\n            </div>\r\n            <div className={'example-button'} style={buttonStyles}\r\n                 onClick={() => showAlert({\r\n                     type: DialogType.SUCCESS, text: 'Text',\r\n                     title: 'Title',\r\n                 })}>Success\r\n                Alert\r\n            </div>\r\n            <div className={'example-button'} style={buttonStyles}\r\n                 onClick={() => showAlert({\r\n                     type: DialogType.INFO, text: 'Text',\r\n                     title: 'Title',\r\n                     allowOutsideClick: false\r\n                 })}>Info Alert\r\n            </div>\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showAlert({\r\n                type: DialogType.WARNING,\r\n                text: 'Text',\r\n                title: 'Title',\r\n                animationType: AnimationType.FADE_IN,\r\n                bodyComponent: <TestComponent a={'a'}/>\r\n            })}>Custom Content Alert\r\n            </div>\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showOptionDialog({\r\n                text: 'Text',\r\n                title: 'Title',\r\n            })}>Option\r\n                Dialog\r\n            </div>\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showInputDialog({\r\n                title: 'Sign Up',\r\n                showCloseButton: true,\r\n                headerTextStyle: {fontWeight: \"bold\", fontSize: \"x-large\"},\r\n                headerStyle: {marginTop:5, marginBottom: 5},\r\n                inputs: [\r\n                    {inputType: 'text', name: 'fname', label: 'First Name'},\r\n                    {inputType: 'text', name: 'lname', label: 'Last Name'},\r\n                    {\r\n                        inputType: 'image',\r\n                        name: 'avatar',\r\n                        label: 'Avatar',\r\n                        multiple: true\r\n                    }, {\r\n                        inputType: 'date',\r\n                        name: 'dob',\r\n                        label: 'Date of Birth'\r\n                    }],\r\n                onConfirm: (response) => {\r\n                    showAlert({title: 'Result', text: JSON.stringify(response)});\r\n                }\r\n            })}>\r\n                Input Dialog With Multiple Input Fields\r\n            </div>\r\n\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showInputDialog({\r\n                title: 'Title',\r\n                inputs: [{inputType: 'text', name: 'test'}],\r\n                onConfirm: (response) => {\r\n                    showAlert({title: 'Result', text: JSON.stringify(response)});\r\n                }\r\n            })}>Input Dialog With Text Field\r\n            </div>\r\n\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showInputDialog({\r\n                title: 'Title',\r\n                inputs: [{inputType: 'date', name: 'test'}],\r\n                onConfirm: (response) => {\r\n                    showAlert({title: 'Result', text: JSON.stringify(response)});\r\n                }\r\n            })}>Input Dialog With Date\r\n            </div>\r\n\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showInputDialog({\r\n                title: 'Title',\r\n                input: {inputType: 'image', name: 'myimage'},\r\n                onConfirm: (response) => {\r\n                    showAlert({title: 'Result', text: JSON.stringify(response)});\r\n                }\r\n            })}>Input Dialog With Date\r\n            </div>\r\n\r\n            <h2>Toast</h2>\r\n\r\n            <div className={'example-button'} style={buttonStyles} onClick={callMe}>Toast Outside of Component\r\n            </div>\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showToast({\r\n                text: 'Lorem Lipsum Lorem Lipsum Lorem Lipsum Lorem Lipsum Lorem Lipsum Lorem Lipsum Lorem Lipsum',\r\n                type: DialogType.INFO,\r\n                timeoutDuration: 5000\r\n            })}>Toast\r\n            </div>\r\n\r\n            <div className={'example-button'} style={buttonStyles} onClick={() => showToast({\r\n                customComponent: <TestComponent a={'test'}/>,\r\n                type: DialogType.INFO,\r\n                timeoutDuration: 5000,\r\n            })}>Custom Content Toast\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nconst App = () => {\r\nreturn (\r\n        <MyComponent/>\r\n            )\r\n            }\r\n\r\n            export const Setup = () => {\r\n            return (\r\n            <PopupProvider>\r\n            <App/>\r\n            </PopupProvider>\r\n            )\r\n        }\r\n\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { Setup } from './TestApp'\r\n\r\nReactDOM.render(<Setup />, document.getElementById('root'))\r\n"],"sourceRoot":""}